$date
	Thu Oct 17 15:12:55 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_reg_file $end
$var wire 16 ! d_out_b [15:0] $end
$var wire 16 " d_out_a [15:0] $end
$var reg 1 # clk $end
$var reg 16 $ d_in [15:0] $end
$var reg 3 % rd_addr_a [2:0] $end
$var reg 3 & rd_addr_b [2:0] $end
$var reg 1 ' reset $end
$var reg 1 ( wr $end
$var reg 3 ) wr_addr [2:0] $end
$scope module uut $end
$var wire 1 # clk $end
$var wire 16 * d_in [15:0] $end
$var wire 8 + load [7:0] $end
$var wire 3 , rd_addr_a [2:0] $end
$var wire 3 - rd_addr_b [2:0] $end
$var wire 1 ' reset $end
$var wire 1 ( wr $end
$var wire 3 . wr_addr [2:0] $end
$var wire 16 / d_out_b [15:0] $end
$var wire 16 0 d_out_a [15:0] $end
$scope module dfrl_16_0 $end
$var wire 1 # clk $end
$var wire 16 1 in [15:0] $end
$var wire 1 2 load $end
$var wire 1 ' reset $end
$var reg 16 3 out [15:0] $end
$upscope $end
$scope module dfrl_16_1 $end
$var wire 1 # clk $end
$var wire 16 4 in [15:0] $end
$var wire 1 5 load $end
$var wire 1 ' reset $end
$var reg 16 6 out [15:0] $end
$upscope $end
$scope module dfrl_16_2 $end
$var wire 1 # clk $end
$var wire 16 7 in [15:0] $end
$var wire 1 8 load $end
$var wire 1 ' reset $end
$var reg 16 9 out [15:0] $end
$upscope $end
$scope module dfrl_16_3 $end
$var wire 1 # clk $end
$var wire 16 : in [15:0] $end
$var wire 1 ; load $end
$var wire 1 ' reset $end
$var reg 16 < out [15:0] $end
$upscope $end
$scope module dfrl_16_4 $end
$var wire 1 # clk $end
$var wire 16 = in [15:0] $end
$var wire 1 > load $end
$var wire 1 ' reset $end
$var reg 16 ? out [15:0] $end
$upscope $end
$scope module dfrl_16_5 $end
$var wire 1 # clk $end
$var wire 16 @ in [15:0] $end
$var wire 1 A load $end
$var wire 1 ' reset $end
$var reg 16 B out [15:0] $end
$upscope $end
$scope module dfrl_16_6 $end
$var wire 1 # clk $end
$var wire 16 C in [15:0] $end
$var wire 1 D load $end
$var wire 1 ' reset $end
$var reg 16 E out [15:0] $end
$upscope $end
$scope module dfrl_16_7 $end
$var wire 1 # clk $end
$var wire 16 F in [15:0] $end
$var wire 1 G load $end
$var wire 1 ' reset $end
$var reg 16 H out [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 H
0G
b0 F
b0 E
0D
b0 C
b0 B
0A
b0 @
b0 ?
0>
b0 =
b0 <
0;
b0 :
b0 9
08
b0 7
b0 6
05
b0 4
b0 3
02
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
0(
1'
b0 &
b0 %
b0 $
0#
b0 "
b0 !
$end
#5000
1#
#10000
12
b1 +
0#
b1010101111001101 $
b1010101111001101 *
b1010101111001101 1
b1010101111001101 4
b1010101111001101 7
b1010101111001101 :
b1010101111001101 =
b1010101111001101 @
b1010101111001101 C
b1010101111001101 F
1(
0'
#15000
b1010101111001101 !
b1010101111001101 /
b1010101111001101 "
b1010101111001101 0
b1010101111001101 3
1#
#20000
02
b0 !
b0 /
b0 +
0#
b1 &
b1 -
0(
#25000
1#
#30000
15
b10 +
0#
b1001000110100 $
b1001000110100 *
b1001000110100 1
b1001000110100 4
b1001000110100 7
b1001000110100 :
b1001000110100 =
b1001000110100 @
b1001000110100 C
b1001000110100 F
b1 )
b1 .
1(
#35000
b1001000110100 !
b1001000110100 /
b1001000110100 6
1#
#40000
05
b0 +
0#
0(
#45000
1#
#50000
18
b100 +
0#
b101011001111000 $
b101011001111000 *
b101011001111000 1
b101011001111000 4
b101011001111000 7
b101011001111000 :
b101011001111000 =
b101011001111000 @
b101011001111000 C
b101011001111000 F
b10 )
b10 .
1(
#55000
b101011001111000 9
1#
#60000
08
b1010101111001101 !
b1010101111001101 /
b101011001111000 "
b101011001111000 0
b0 +
0#
b0 &
b0 -
b10 %
b10 ,
0(
#65000
1#
#70000
b0 "
b0 0
b0 !
b0 /
b0 3
b0 6
b0 9
0#
1'
#75000
1#
#80000
0#
b1 &
b1 -
b0 %
b0 ,
0'
#85000
1#
#90000
0#
